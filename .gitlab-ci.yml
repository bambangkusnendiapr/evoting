stages:
  - preparation
  - build_image
  - build_image_with_tags
  - deploy_dev
  - deploy_staging
  - deploy_production
  - migrate_db_dev
  - migrate_db_staging
  - migrate_db_prod
  - migrate
  - cleanup_table

preparation:
  image: lorisleiva/laravel-docker:7.3
  stage: preparation
  only:
    - main
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - composer dump-autoload --optimize --classmap-authoritative
    - cp .env.example .env
    - php artisan key:generate

build_image:
  image: docker:19.03.8
  stage: build_image
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
  script:
    - $(aws ecr get-login --no-include-email --region ap-southeast-1)
    - docker build -f docker/app/Dockerfile -t $REPOSITORY_ECR_URL:$CI_PIPELINE_IID .
    - docker push $REPOSITORY_ECR_URL
  only:
    - main

build_image_with_tags:
  only:
    - tags
    - prod-experiment
  image: docker:19.03.8
  services:
    - docker:19.03.12-dind
  stage: build_image_with_tags
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
  script:
    - $(aws ecr get-login --no-include-email --region ap-southeast-1)
    - docker build -f docker/app/Dockerfile -t $REPOSITORY_ECR_URL:$CI_COMMIT_REF_NAME .
    - docker push $REPOSITORY_ECR_URL

Deploy to Dev:
  image: ubuntu:latest
  stage: deploy_dev
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client rsync -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_DEV" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod +x $CI_PROJECT_DIR/init-dev.sh
    - $CI_PROJECT_DIR/init-dev.sh
    - chmod +x $CI_PROJECT_DIR/init-dev.sh
    - rsync -avuz $CI_PROJECT_DIR/init.sh $USER_DEV@$SERVER_DEV:~/init.sh
    - rsync -avuz $CI_PROJECT_DIR/docker/docker-compose-dev.yml $USER_DEV@$SERVER_DEV:~/docker-compose.yml
    - rsync -avuz $CI_PROJECT_DIR/.env.example $USER_DEV@$SERVER_DEV:~/.env
  script:
    - ssh $USER_DEV@$SERVER_DEV "source init.sh"
    - ssh $USER_DEV@$SERVER_DEV "rm init.sh"
  only:
    - main

Deploy Staging:
  image: ubuntu:latest
  stage: deploy_staging
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client rsync -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -avuz $CI_PROJECT_DIR/docker/docker-compose.yml $USER@$SERVER_STAGING:~/docker-compose.yml
    - rsync -avuz $CI_PROJECT_DIR/.env.example $USER@$SERVER_STAGING:~/.env
  script:
    - pwd
    - ssh $USER@$SERVER_STAGING "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_URL;export APP_ENV=$APP_ENV_DEV;export REPOSITORY_ECR_URL=$REPOSITORY_ECR_URL;export MYSQL_DATABASE=$MYSQL_DATABASE; export MYSQL_USER=$MYSQL_USER; export MYSQL_PASSWORD=$MYSQL_PASSWORD; export MYSQL_ROOT_HOST=$MYSQL_ROOT_HOST;export MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD;export AWS_BUCKET_DEV=$AWS_BUCKET_DEV;export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION;export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY;export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID;export PROD_MAIL_ENCRYPTION=$PROD_MAIL_ENCRYPTION;export PROD_MAIL_PASSWORD=$PROD_MAIL_PASSWORD;export PROD_MAIL_USERNAME=$PROD_MAIL_USERNAME;export PROD_MAIL_PORT=$PROD_MAIL_PORT;export PROD_MAIL_HOST=$PROD_MAIL_HOST;export PROD_MAIL_DRIVER=$PROD_MAIL_DRIVER;export PHPMYADMIN_URL=$PHPMYADMIN_URL;export TAG_ANA=$CI_COMMIT_REF_NAME; docker-compose down; docker system prune -a -f; docker pull $REPOSITORY_ECR_URL:$CI_COMMIT_REF_NAME; docker-compose up -d; docker logout"
  only:
    - /-RC/

Deploy Production:
  image: ubuntu:latest
  stage: deploy_production
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client rsync -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -avuz $CI_PROJECT_DIR/docker/docker-compose-prod.yml $USER_PROD1@$SERVER_PROD1:~/docker-compose.yml
    - rsync -avuz $CI_PROJECT_DIR/docker/docker-compose-prod.yml $USER_PROD2@$SERVER_PROD2:~/docker-compose.yml
    - rsync -avuz $CI_PROJECT_DIR/.env.example $USER_PROD1@$SERVER_PROD1:~/.env
    - rsync -avuz $CI_PROJECT_DIR/.env.example $USER_PROD2@$SERVER_PROD2:~/.env
  script:
    - pwd
    - ssh $USER_PROD1@$SERVER_PROD1 "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_URL;export SESSION_DRIVER=$PROD_SESSION_DRIVER;export APP_ENV=$APP_ENV_PROD;export PROD_PORT_MAPPING_PHPMYADMIN=$PROD_PORT_MAPPING_PHPMYADMIN;export PROD_PORT_MAPPING=$PROD_PORT_MAPPING;export CONTAINER_APP_PROD=$CONTAINER_APP_PROD;export REPOSITORY_ECR_URL=$REPOSITORY_ECR_URL;export AWS_BUCKET_PROD=$AWS_BUCKET_PROD;export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION;export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY;export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID;export PROD_MAIL_ENCRYPTION=$PROD_MAIL_ENCRYPTION;export PROD_MAIL_PASSWORD=$PROD_MAIL_PASSWORD;export PROD_MAIL_USERNAME=$PROD_MAIL_USERNAME;export PROD_MAIL_PORT=$PROD_MAIL_PORT;export PROD_MAIL_HOST=$PROD_MAIL_HOST;export PROD_MAIL_DRIVER=$PROD_MAIL_DRIVER;export PROD_MYSQL_PORT=$PROD_MYSQL_PORT;export PROD_MYSQL_HOST=$PROD_MYSQL_HOST;export PROD_MYSQL_CONNECTION=$PROD_MYSQL_CONNECTION;export PROD_MYSQL_DATABASE=$PROD_MYSQL_DATABASE; export PROD_MYSQL_USER=$PROD_MYSQL_USER; export PROD_MYSQL_PASSWORD=$PROD_MYSQL_PASSWORD;export TAG_ANA=$CI_COMMIT_REF_NAME; docker-compose down; docker system prune -a -f; docker pull $REPOSITORY_ECR_URL:$CI_COMMIT_REF_NAME; docker-compose up -d; docker logout"
    - ssh $USER_PROD2@$SERVER_PROD2 "aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $ECR_URL;export SESSION_DRIVER=$PROD_SESSION_DRIVER;export APP_ENV=$APP_ENV_PROD;export PROD_PORT_MAPPING_PHPMYADMIN=$PROD_PORT_MAPPING_PHPMYADMIN;export PROD_PORT_MAPPING=$PROD_PORT_MAPPING;export CONTAINER_APP_PROD=$CONTAINER_APP_PROD;export REPOSITORY_ECR_URL=$REPOSITORY_ECR_URL;export AWS_BUCKET_PROD=$AWS_BUCKET_PROD;export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION;export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY;export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID;export PROD_MAIL_ENCRYPTION=$PROD_MAIL_ENCRYPTION;export PROD_MAIL_PASSWORD=$PROD_MAIL_PASSWORD;export PROD_MAIL_USERNAME=$PROD_MAIL_USERNAME;export PROD_MAIL_PORT=$PROD_MAIL_PORT;export PROD_MAIL_HOST=$PROD_MAIL_HOST;export PROD_MAIL_DRIVER=$PROD_MAIL_DRIVER;export PROD_MYSQL_PORT=$PROD_MYSQL_PORT;export PROD_MYSQL_HOST=$PROD_MYSQL_HOST;export PROD_MYSQL_CONNECTION=$PROD_MYSQL_CONNECTION;export PROD_MYSQL_DATABASE=$PROD_MYSQL_DATABASE; export PROD_MYSQL_USER=$PROD_MYSQL_USER; export PROD_MYSQL_PASSWORD=$PROD_MYSQL_PASSWORD;export TAG_ANA=$CI_COMMIT_REF_NAME; docker-compose down; docker system prune -a -f; docker pull $REPOSITORY_ECR_URL:$CI_COMMIT_REF_NAME; docker-compose up -d; docker logout"
  only:
    - /-RELEASE$/

Migrate Database Dev:
  image: ubuntu:latest
  stage: migrate_db_dev
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_DEV" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh $USER_DEV@$SERVER_DEV "docker exec $CONTAINER_APP_DEV php artisan migrate --force"
  only:
    - main

Migrate Database Staging:
  image: ubuntu:latest
  stage: migrate_db_staging
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh $USER@$SERVER_STAGING "docker exec $APP_CONTAINER_NAME php artisan migrate --force"
  only:
    - /-RC/

Migrate Database Production:
  image: ubuntu:latest
  stage: migrate_db_prod
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh $USER_PROD1@$SERVER_PROD1 "docker exec $CONTAINER_APP_PROD php artisan migrate --force"
    - ssh $USER_PROD2@$SERVER_PROD2 "docker exec $CONTAINER_APP_PROD php artisan migrate --force"
  when: manual
  only:
    - /-RELEASE$/

Migrate Table:
  image: lorisleiva/laravel-docker:7.4
  stage: migrate
  script:
    - yarn global add heroku@7.42.1
    - heroku run php artisan migrate --exit-code --app $HEROKU_APP
    - heroku run php artisan optimize --exit-code --app $HEROKU_APP
  when: manual
  only:
    - main
    - /-RC/
    - /-RELEASE$/

cleanup_table:
  image: lorisleiva/laravel-docker:7.4
  stage: cleanup_table
  script:
    - apk add ruby ruby-dev ruby-irb ruby-rake ruby-io-console ruby-bigdecimal ruby-json ruby-bundler yarn ruby-rdoc >> /dev/null
    - apk update
    - gem install dpl >> /dev/null
    - dpl --provider=heroku --app=$HEROKU_APP --api-key=$HEROKU_API_KEY
    - yarn global add heroku@7.42.1
    - heroku run php artisan migrate:fresh --seed --force --exit-code --app $HEROKU_APP
    - heroku run php artisan optimize --exit-code --app $HEROKU_APP
  when: manual
  only:
    - main
    - /-RC/
    - /-RELEASE$/

